

CMSI 3510 Operating Systems
Spring Semester 2022
Results for Homework #2 Evaluation
==================================

Question 1 mutex reversing:          5/ 5 points
   Perfect!

Question 2 auditing code change:     5/ 5 points
   Close!  In the original code, the first three lines will take a snapshot
   of the state of the ticket selling data.  The *snapshot* is used to access
   the current state values of the data, so that getting the number of seats
   that are left is consistent with the amount of money collected for the
   seats that have been sold.  If the snapshot is NOT used, it is possible
   that the read for the number of seats left and the amount of money could
   be out of alignment, since the audit() function could read the number of
   seats left, then could be interrupted by another thread that sells a
   ticket, then could run again and determine that there is MORE money than
   the value of the seats that it has would produce, thus being inconsistent
   data.


Question 3 test program:            20/20 points
   OK, although next time it would be nice to have the source code in its
   own source file so I can run it directly....  :)

Question 4 notifyall() addition:     10/10 points
   OK, with same comment as #3....
   Not sure why your new class didn't work with the old test routines... did
   you investigate this?  What was the reason?

Question 5a 2-phase locking:         0/ 5 points
   Not answered....  :(
   No, it's not possible.  With two-phase locking, one transaction runs at
      a time, so T1 will run, change both values, then T2 will run and read
      the new values.

Question 5b short read locks:        0/ 5 points
   Not answered....  :(
   No, it's not possible.  With read committed isolation, the writes will
      have exclusive locks, so T1 will have exclusive write access for the
      duration of the transaction.  Since write locks are exclusive, in this
      case it's the same outcome as with two-phase locking.

Question 5c snapshot isolation:      0/ 5 points
   Not answered....  :(
   Actually, yes, it's possible.  With snapshot isolation, the values are
      written to DIFFERENT locations than the original storage, and then
      later written to the original location.  If T2 reads x before that
      update write is done, and reads y AFTER that update write is done, it
      would have two inconsistent values, the new value for x and the old
      value for y.

Question 6 virtual address xlate:    0/ 5 points
   Not answered....  :(
      The page blocks are 4096 bytes each, so the addresses of the beginning and
      ending 4-byte words are shown in the following table:

      page     start       end
        0          0      4092   start is (page * 4096)
        1       4096      8188   end is (start + 4096) - 4
        2       8192     12284
        3      12288     16380
        4      16384     20476
        5      20480     24572
        6      24576     28668
        7      28672     32764

      Since the blocks are 4096 bytes each, the starting virtual address of the
      block at page 6 is 4096 * 6 = 24576.

      The ending address of that block would be 24576 + 4092 = 28668.

      The block in the page frames array are ALSO 4096 bytes each, so the values
      are similar.  The difference is that for virtual page 6, the memory map
      is to physical page 3.  The same table can be used as shown above, but
      page three is located from 12288 through 16380.


Question 7 calc. explanation:        5/ 5 points
   Perfect!

Question 8 loop 4096 analysis:      20/20 points
   Nice work.

Question 9 fork() tree:             15/15 points
   You have the right idea here so full credit, but be careful with naming
      the processes "p1-fork", "p2-fork" and so on.  If you actually use the
      'ps -eaf | grep <program>' command you can see something like what is
      in the following table, which shows how the different parent and child
      processes can be tracked using PID and PPID values:

   1684989130  7789  7739   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7790  7789   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7791  7789   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7792  7789   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7793  7790   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7794  7791   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7795  7790   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7796  7793   0  5:04PM ttys000    0:00.00 multiforkerMac
   1684989130  7798  7761   0  5:04PM ttys001    0:00.00 grep multi


   The tree would look like this:

                        7739
                          |
                 +------7789-------+
                 |        |        |
                 |        |        |
         +-----7790     7791     7792
         |       |        |
         |       |        |
       7793    7795     7794
         |
         |
       7796


Total 80 out of 100 = 80.00% which is a B-minus

Comments:
---------
Nice work on what is here!


===========================
Current course evaluations:
===========================

    Homework01:  11/ 12 =  91.67% which is  9.17 points
    Homework02:  80/100 =  80.00% which is  8.00 points
Prelim. Design:  25/ 25 = 100.00% which is 10.00 points
                                           -----
                                   Total:  27.17 out of 30.00 = 90.57%
                                             which is an A-minus
